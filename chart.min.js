 class EZChartJS{constructor(containerId,options={}){this.container=document.getElementById(containerId);if(!this.container){throw new Error(`Container element with id '${containerId}' not found`);}this.container.innerHTML='';this.canvas=document.createElement('canvas');this.container.appendChild(this.canvas); this.ctx=this.canvas.getContext('2d');this.options={type: 'line', title: '', backgroundColor: '#ffffff', responsive: true, maintainAspectRatio: false, ...options}; this._resizeCanvas(); if(this.options.responsive){window.addEventListener('resize',() =>{ this._resizeCanvas(); if(this.lastData) this.draw(this.lastData); });} this.defaultColors=['#3366cc','#dc3912','#ff9900','#109618','#990099', '#0099c6','#dd4477','#66aa00','#b82e2e','#316395'];}_resizeCanvas(){if(this.options.responsive){const containerStyle=getComputedStyle(this.container);const width=parseInt(containerStyle.width);const height=parseInt(containerStyle.height) || Math.floor(width * 0.6);this.canvas.width=width;this.canvas.height=height;this.canvas.style.width='100%';this.canvas.style.height='100%';} else{this.canvas.width=this.options.width || 600;this.canvas.height=this.options.height || 400;}}draw(data){this.lastData=data;this.ctx.fillStyle=this.options.backgroundColor;this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height); if(this.options.title){this._drawTitle();} switch(this.options.type.toLowerCase()){case 'line': this._drawLineChart(data); break;case 'bar': this._drawBarChart(data); break;case 'pie': this._drawPieChart(data); break;default: throw new Error(`Unsupported chart type: ${this.options.type}`);}}_drawTitle(){this.ctx.font=this.options.titleFont || 'bold 18px Arial';this.ctx.fillStyle=this.options.titleColor || '#333333';this.ctx.textAlign='center';this.ctx.fillText(this.options.title,this.canvas.width / 2,30);}_drawLineChart(data){if(!data.labels || !data.datasets){throw new Error('Invalid data format for line chart');} const margin=60;const graphWidth=this.canvas.width - margin * 2;const graphHeight=this.canvas.height - margin * 2;const labelCount=data.labels.length; this.ctx.strokeStyle=this.options.axisColor || '#cccccc';this.ctx.lineWidth=this.options.axisWidth || 1; this.ctx.beginPath();this.ctx.moveTo(margin,margin + graphHeight);this.ctx.lineTo(margin + graphWidth,margin + graphHeight);this.ctx.stroke(); this.ctx.beginPath();this.ctx.moveTo(margin,margin);this.ctx.lineTo(margin,margin + graphHeight);this.ctx.stroke(); this.ctx.font=this.options.labelFont || '12px Arial';this.ctx.fillStyle=this.options.labelColor || '#666666';this.ctx.textAlign='center'; data.labels.forEach((label,i) =>{const x=margin +(i *(graphWidth /(labelCount - 1)));this.ctx.fillText(label,x,margin + graphHeight + 20);}); const maxValue=Math.max(...data.datasets.flatMap(d => d.data));const minValue=Math.min(...data.datasets.flatMap(d => d.data));const valueRange=maxValue - minValue; data.datasets.forEach((dataset,datasetIndex) =>{const color=dataset.color || this.defaultColors[datasetIndex % this.defaultColors.length];this.ctx.strokeStyle=color;this.ctx.lineWidth=this.options.lineWidth || 2;this.ctx.beginPath();dataset.data.forEach((value,i) =>{ const x=margin +(i *(graphWidth /(labelCount - 1))); const y=margin + graphHeight -((value - minValue) / valueRange * graphHeight);if(i === 0){ this.ctx.moveTo(x,y);} else{ this.ctx.lineTo(x,y);} });this.ctx.stroke();dataset.data.forEach((value,i) =>{ const x=margin +(i *(graphWidth /(labelCount - 1))); const y=margin + graphHeight -((value - minValue) / valueRange * graphHeight);this.ctx.fillStyle=color; this.ctx.beginPath(); this.ctx.arc(x,y,this.options.pointRadius || 4,0,Math.PI * 2); this.ctx.fill(); });}); this._drawLegend(data.datasets);}_drawBarChart(data){if(!data.labels || !data.datasets){throw new Error('Invalid data format for bar chart');} const margin=60;const graphWidth=this.canvas.width - margin * 2;const graphHeight=this.canvas.height - margin * 2;const labelCount=data.labels.length;const barGroupWidth=graphWidth / labelCount;const datasetCount=data.datasets.length;const barWidth=(barGroupWidth * 0.8) / datasetCount; this.ctx.strokeStyle=this.options.axisColor || '#cccccc';this.ctx.lineWidth=this.options.axisWidth || 1; this.ctx.beginPath();this.ctx.moveTo(margin,margin + graphHeight);this.ctx.lineTo(margin + graphWidth,margin + graphHeight);this.ctx.stroke(); this.ctx.beginPath();this.ctx.moveTo(margin,margin);this.ctx.lineTo(margin,margin + graphHeight);this.ctx.stroke(); this.ctx.font=this.options.labelFont || '12px Arial';this.ctx.fillStyle=this.options.labelColor || '#666666';this.ctx.textAlign='center'; data.labels.forEach((label,i) =>{const x=margin +(i * barGroupWidth) + barGroupWidth / 2;this.ctx.fillText(label,x,margin + graphHeight + 20);}); const maxValue=Math.max(...data.datasets.flatMap(d => d.data));const minValue=Math.min(0,...data.datasets.flatMap(d => d.data)); data.datasets.forEach((dataset,datasetIndex) =>{const color=dataset.color || this.defaultColors[datasetIndex % this.defaultColors.length];dataset.data.forEach((value,i) =>{ const x=margin +(i * barGroupWidth) +(datasetIndex * barWidth); const barHeight=((value - minValue) /(maxValue - minValue)) * graphHeight; const y=margin + graphHeight - barHeight;this.ctx.fillStyle=color; this.ctx.fillRect(x,y,barWidth,barHeight);if(this.options.showValues){ this.ctx.fillStyle=this.options.valueColor || '#333333'; this.ctx.font=this.options.valueFont || '10px Arial'; this.ctx.textAlign='center'; this.ctx.fillText(value.toString(),x + barWidth/2,y - 5);} });}); this._drawLegend(data.datasets);}_drawPieChart(data){if(!data.labels || !data.datasets || data.datasets.length !== 1){throw new Error('Pie chart requires exactly one dataset with matching labels');} const dataset=data.datasets[0];if(dataset.data.length !== data.labels.length){throw new Error('Labels count must match data count for pie chart');} const centerX=this.canvas.width / 2;const centerY=this.canvas.height / 2;const radius=Math.min(this.canvas.width,this.canvas.height) / 2 - 40; let total=dataset.data.reduce((sum,value) => sum + value,0);if(total <= 0) total=1; let startAngle=-Math.PI / 2;dataset.data.forEach((value,i) =>{if(value <= 0) return;const sliceAngle=(value / total) * 2 * Math.PI;const color=dataset.colors?.[i] || this.defaultColors[i % this.defaultColors.length];this.ctx.fillStyle=color;this.ctx.beginPath();this.ctx.moveTo(centerX,centerY);this.ctx.arc(centerX,centerY,radius,startAngle,startAngle + sliceAngle);this.ctx.closePath();this.ctx.fill();const midAngle=startAngle + sliceAngle / 2;const labelRadius=radius * 0.7;const labelX=centerX + Math.cos(midAngle) * labelRadius;const labelY=centerY + Math.sin(midAngle) * labelRadius;const percent=((value / total) * 100).toFixed(1);const labelText=this.options.compactLabels ? `${percent}%` : `${data.labels[i]}(${percent}%)`;this.ctx.font=this.options.labelFont || '12px Arial';this.ctx.fillStyle=this.options.labelColor || '#333333';this.ctx.textAlign='center';this.ctx.fillText(labelText,labelX,labelY + 5);startAngle += sliceAngle;});}_drawLegend(datasets){if(this.options.hideLegend || this.options.type === 'pie') return; const legendX=this.canvas.width - 150;let legendY=40;const legendItemHeight=20; this.ctx.font=this.options.legendFont || '12px Arial';this.ctx.textAlign='left'; datasets.forEach((dataset,i) =>{const color=dataset.color || this.defaultColors[i % this.defaultColors.length];this.ctx.fillStyle=color;this.ctx.fillRect(legendX,legendY,15,15);this.ctx.fillStyle=this.options.legendColor || '#333333';this.ctx.fillText(dataset.label || `Dataset ${i + 1}`,legendX + 20,legendY + 12);legendY += legendItemHeight;});}updateOptions(newOptions){this.options={...this.options, ...newOptions};this._resizeCanvas();if(this.lastData) this.draw(this.lastData);}destroy(){this.container.innerHTML='';this.canvas=null;this.ctx=null;}}